# Импортируем библиотеки пайтон
import telebot
import datetime
import time

# Токен бота, который выдается в процессе создания бота Telegram, вставляем вместо 'ваш токен'
bot = telebot.TeleBot('6572447361:')

# Список с расписанием занятий (в моём случае списка 2, т.к. у меня есть чётная неделя и нечётная) Чётная\за знаменником = Schedule 2, Нечётная  Schedule 1
schedule1 = {
    'Monday': [
        {'Час': '13:00', 'Предмет': 'Фізична культура'},
        {'Час': '14:20', 'Предмет': 'Математика'},
        {'Час': '15:40', 'Предмет': 'Основи програмної інженерії'}
    ],
    'Tuesday': [
        {'Час': '13:00', 'Предмет': 'Українська мова'},
        {'Час': '14:20', 'Предмет': 'Українська література'},
        {'Час': '15:40', 'Предмет': 'Культуралогія'}
    ],
    'Wednesday': [
        {'Час': '12:00', 'Предмет': 'Класна година'},
        {'Час': '13:00', 'Предмет': 'Фізична культура'},
        {'Час': '14:20', 'Предмет': 'Основи і стандарти інформаційної безпеки'},
        {'Час': '15:40', 'Предмет': 'Дискретна математика'}
    ],
    'Thursday': [
        {'Час': '13:00', 'Предмет': 'Ауд:332-1 Математика'},
        {'Час': '14:20', 'Предмет': 'Ауд:438-2 Основи програмної інженерії'},
        {'Час': '15:40', 'Предмет': 'Ауд:333-1 Дискретна математика'}
    ],
    'Friday': [
        {'Час': '11:10', 'Предмет': 'Фізика і астрономія'},
        {'Час': '13:00', 'Предмет': 'Іноземна мова'},
        {'Час': '14:20', 'Предмет': 'Алгоритми та методи обчислень'}
    ],
    'Saturday': [
        {'Час': '13:00', 'Предмет': 'Фізика і астрономія'},
        {'Час': '14:20', 'Предмет': 'Основи економічної теорії'},
        {'Час': '15:40', 'Предмет': 'Основи і стандарти інформаційної безпеки'}
    ]
}

 # Нижче нечетна\ за числеником. Дни недели можно удалять или добавлять. Главное сохранить синтаксис списка, не потерять символы. Название дня недели должно быть на английском языке.

schedule2 = {
    'Monday': [
        {'Час': '13:00', 'Предмет': 'Фізична культура'},
        {'Час': '14:20', 'Предмет': 'Математика'},
        {'Час': '15:40', 'Предмет': 'Основи програмної інженерії'}
    ],
    'Tuesday': [
        {'Час': '13:00', 'Предмет': 'Українська мова'},
        {'Час': '14:20', 'Предмет': 'Українська література'},
        {'Час': '15:40', 'Предмет': 'Культуралогія'}
    ],
    'Wednesday': [
        {'Час': '12:00', 'Предмет': 'Класна година'},
        {'Час': '13:00', 'Предмет': 'Фізична культура'},
        {'Час': '14:20', 'Предмет': 'Основи і стандарти інформаційної безпеки'},
        {'Час': '15:40', 'Предмет': 'Дискретна математика'}
    ],
    'Thursday': [
        {'Час': '13:00', 'Предмет': 'Основи програмної інженерії'},
        {'Час': '14:20', 'Предмет': 'Математика'},
        {'Час': '15:40', 'Предмет': 'Історія України'}
    ],
    'Friday': [
        {'Час': '11:10', 'Предмет': 'Фізика і астрономія'},
        {'Час': '13:00', 'Предмет': 'Іноземна мова'},
        {'Час': '14:20', 'Предмет': 'Алгоритми та методи обчислень'}
    ],
    'Saturday': [
        {'Час': '13:00', 'Предмет': 'Фізика і астрономія'},
        {'Час': '14:20', 'Предмет': 'Основи економічної теорії'},
        {'Час': '15:40', 'Предмет': 'Основи і стандарти інформаційної безпеки'}
    ]
}

# Получаем текущую дату с помощью библиотеки datetime
now = datetime.datetime.now()

# Получаем номер недели в году с помощью библиотеки datetime
week_number = now.isocalendar()[1]

# Если номер недели чётный, то неделя чётная, иначе - нечётная
if week_number % 2 == 0:                                            # Этот блок if else можно исключить из кода, т.к. он не влияет на тг бота
    print("Поточний тиждень за знаменником")                                  # Я использую его для проверки в командной строке, что код запустился и работает
else:                                                               # Если всё идёт по плану, то появится надпись "Текущая неделя чётная/нечётная" в зависимости от недели
    print("Поточний тиждень за чисельником")                                #

# Функция для получения расписания на текущий день
def get_today_schedule():
    current_day = datetime.datetime.now().strftime("%A")  # current_day получает ответ в виде дня недели на английском языке с помощью библиотеки datetime
    if week_number % 2 == 0 and current_day in schedule2: # Если условие (деление номера недели на 2 без остатка) верно и в списке есть день, который совпадает с текущим,
        return schedule2[current_day]                     # функция вернёт ответ в виде списка Schedule 2
    elif current_day in schedule1:                        # Если условие деления не верно, функция вернёт ответ в виде списка Schedule 1
        return schedule1[current_day]
    else:                                                 # Если в списке нет текущего дня недели, функция вернёт пустой ответ
        return []

# Функция для форматированного вывода расписания в текстовом формате
def format_schedule(schedule):
    if not schedule:                                                     # Если функция get_today_schedule вернула пустой ответ,
        return "Сьогодні пар не має!"                                        # функиця format_schedule вернёт ответ "Сегодня пар нет!"
    else:                                                                # Если функция get_today_schedule вернула ответ в виде одного из списков, format_schedule вернёт ответ в виде переменной result
        result = "Розклад на сьогодні:\n"                              # переменная result имеет вид string (по русски = строка), Символ новой строки в Python — это \n . Он используется для обозначения окончания строки текста
        for lesson in schedule:                                          # for in - это цикл. Общий синтаксис for... in в python выглядит следующим образом: for <переменная> in <последовательность>:< действие> else:< действие>. 
            result += f"{lesson['Час']} - {lesson['Предмет']}\n"       # Элементы «последовательности» перебираются один за другим «переменной» цикла; если быть точным, переменная указывает на элементы.
        return result                                                    # "+-" - это инкрементальные конкатенации в цикле. Тема не самая простая, об этом позже. f-строки позволяют форматировать информацию в нужном нам виде

# Функция для отправки расписания на текущий день в чат
def send_today_schedule(chat_id):
    bot.send_message(chat_id, format_schedule(get_today_schedule()))     # bot.send_message отправляет данные в чат с ботом

# Задаем обработчик команды /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "Привіт, я бот Одеського технічного фахового коледжу!")

# Задаем обработчик команды /schedule
@bot.message_handler(commands=['schedule'])
def send_schedule(message):
    send_today_schedule('478011066')        # Вместо "айди чата с ботом" вставляем chatid своего чата

# Определяем интервал для автоматической отправки расписания
interval = 60 * 60  # Отправлять расписание каждый час (измеряется в секундах, поэтому 60 сек * 60 = 1 час)

# Запускаем цикл для автоматической отправки расписания
while True:
    send_today_schedule('478011066')  # Замените <chat_id> на идентификатор нужного чата
    time.sleep(interval)                      # time.sleep запускает таймер ожидания с перменной interval

bot.polling()   # Запускаем бота 

#В этом примере бот отвечает на команду /schedule отправкой расписания занятий на текущий день в чат. 
# Также цикл While отправляет расписание в заданный чат каждый заданный интервал времени. 
# Вы можете использовать этот пример как основу для своего Telegram-бота с расписанием занятий и автоматической отправкой.
